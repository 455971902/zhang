


#include "adc12.h"

#include "MSP430x54x.h"

#include "kernel.h"
#include "lcd.h"


__no_init static unsigned int preBuf[PRE_BUF_SIZE];  //压力数据缓冲
__no_init static struct SMP_DATA smpData[SAMP_BUF_SIZE];


static unsigned char adcSmpFlag = 1;    //表示启用AD采样

static int otherComp = 0;   //除压力数据缓冲区外胡数据缓冲区第一次充满标志变量
static int preComp = 0;     //压力数据缓冲区第一次充满标志

static unsigned long battery1Sum = 0;
static unsigned long presureSum = 0;
static unsigned long DQSum = 0;
static unsigned long battery2Sum = 0;
static unsigned long tempSum = 0;
static unsigned long chargeCurSum = 0;


static unsigned int battery1 = 0;
static unsigned int DQ = 0;
static unsigned int battery2 = 0;
static unsigned int temp = 0;
static unsigned int chargeCurrent = 0;


void initBuf(void)
{
    int i;
    
    for(i = 0;i < SAMP_BUF_SIZE; i++)
    {
        
        smpData[i].battery1 = 0;
        smpData[i].DQ = 0;
        smpData[i].battery2 = 0;
        smpData[i].temp = 0;
        smpData[i].chargeCurrent = 0;
    }
    
    for(i = 0; i < PRE_BUF_SIZE; i++)
    {
        preBuf[i] = 0;
    }
}


void initAdc(void)   // 初始化AD采样函数
{
    ADC12CTL0 |= ADC12MSC +  //队列采样出发模式 
                 ADC12ON + ADC12REFON;    //AD核心开启
    
    ADC12CTL1 |= ADC12SHP +      //使用触发采样时钟模式采样
                 ADC12SSEL_2 +   //使用ACLK作为AD核心时钟
                 ADC12CONSEQ_1;  //使用单次队列模式采样
    ADC12CTL2 |= ADC12PDIV + ADC12RES_2;
    
    
    ADC12MCTL0 |= ADC12INCH_1;  //通道1,设备开机状态信号
    
    ADC12MCTL1 |= ADC12INCH_3;  //通道3,压力传感器输入信号
    
    ADC12MCTL2 |= ADC12INCH_5;  //通道5，温度传感器输入信号
    
    ADC12MCTL3 |= ADC12INCH_7;  //通道7,电池电量输入信号
    
    ADC12MCTL4 |= ADC12INCH_12;  //通道12,电池温度输入信号
    
    ADC12MCTL5 |= ADC12INCH_15 + //通道4,充电电流输入信号
                  ADC12EOS;      //设置为最后一个采样胡通道
    
    P6OUT &= ~(BIT1 + BIT3 + BIT5 + BIT7);
    P6DIR &= ~(BIT1 + BIT3 + BIT5 + BIT7);
    P6SEL |= BIT1 + BIT3 + BIT5 + BIT7;  //使P6.1-P6.4为AD模式输入口
    
    P7OUT &= ~(BIT4 + BIT7);
    P7DIR &= ~(BIT4 + BIT7);
    P7SEL |= BIT4 + BIT7;
    
}



unsigned int getPAdc(void)     //获得压力采样值,未经过小数运算
{
    unsigned int re = 0;
    
    cli();     //关中断
    
    re = presureSum / PRE_BUF_SIZE;     //获得压力采样平均值
    
    sti();     //开中断
    
    return re;
    
}


unsigned long getIAdc(void)   //获得电流采样值，多个值的总和，未经小数运算
{
    unsigned long re = 0;
    
    cli();    //关中断
    
    re = 0;   //获得电流采样值
    
    sti();   //开中断
    
    return re;
}



int getBatLevel(void)  //获得电池电量级别
{
    int re = 0;
    unsigned int batV = 0;
    
    batV = getBattery1();
    
    if(batV > 3800)
    {
        re = 4;
        
    }else if(batV > 3680)
    {
        re = 3;
    }else if(batV > 3544)
    {
        re = 2;
    }else if(batV > 3470)
    {
        re = 1;
    }else 
    {
        re = 0;
    }
    
    return re;
}



unsigned int getBattery1(void)  //获得battery1采样值函数
{
    unsigned int re;
    if(otherComp)
    {
        re = (unsigned int)(battery1Sum / SAMP_BUF_SIZE);
    }else
    {
        return battery1;
    }
    
    return re;
}

unsigned int getDQ(void)         //获得DQ采样值函数
{
    unsigned int re;
    if(otherComp)
    {
        re = (unsigned int)(DQSum / SAMP_BUF_SIZE);
    }else
    {
        return DQ;
    }
    
    return re;
}

unsigned int getBattery2(void)   //获得battery2采样值函数
{
    unsigned int re;
    if(otherComp)
    {
        re = (unsigned int)(battery2Sum / SAMP_BUF_SIZE);
    }else
    {
        return battery2;
    }
    
    return re;
}


unsigned int getTemp(void)       //获得tem采样值函数
{
    unsigned int re;
    if(otherComp)
    {
        re = (unsigned int)(tempSum / SAMP_BUF_SIZE);
    }else
    {
        return temp;
    }
    
    return re;
    
}



unsigned int getChargeCur(void)  //获得充电电流采样值函数
{
    unsigned int re;
    if(otherComp)
    {
        re = (unsigned int)(chargeCurSum / SAMP_BUF_SIZE);
    }else
    {
        return chargeCurrent;
    }
    
    return re;
}




void adcTask(void)    //adc采样任务
{
    unsigned int adResult[6] = {0,0,0,0,0,0};
    long timeOut = 0;
    int i = 0;
    int j = 0;
    
    
    initBuf();    //初始化采样数据缓冲区
    initAdc();    //初始化ADC模块
    
    while(1)
    {
        
        if(adcSmpFlag)  //AD采样是否启用
        {
            startAdc();    //启动AD采样
            
            timeOut = 0;
            
            while(!checkCmpled() && timeOut < 500000) //如果超时，则同样退出本循环
            {                                         //以防止程序在此占用CPU
                timeOut ++;
            }
            
            if(timeOut < 10000)   //如果采样时间正常，则保存采样数据
            {
                adResult[0] = ADC12MEM0; //battery1
                adResult[1] = ADC12MEM1; //presure
                adResult[2] = ADC12MEM2; //DQ
                adResult[3] = ADC12MEM3; //battery2
                adResult[4] = ADC12MEM4; //temp
                adResult[5] = ADC12MEM5; //chargeCurrent
                
                if(otherComp == 0)
                {
                    cli();   //关中断
                    smpData[i].battery1 = adResult[0];
                    battery1Sum += adResult[0];
                    battery1 = adResult[0];
                    
                    smpData[i].DQ       = adResult[2];
                    DQSum += adResult[2];
                    DQ = adResult[2];
                    
                    smpData[i].battery2 = adResult[3];
                    battery2Sum += adResult[3];
                    battery2 = adResult[3];
                    
                    smpData[i].temp     = adResult[4];
                    tempSum += adResult[4];
                    temp = adResult[4];
                    
                    smpData[i].chargeCurrent = adResult[5];
                    chargeCurSum += adResult[5];
                    chargeCurrent = adResult[5];
                    
                    sti();  //开中断
                    
                    i++;
                    if(i >= SAMP_BUF_SIZE)
                    {
                        i = 0;
                        otherComp = 1; //第一次填充满缓冲区完成
                    }
                }else
                {
                    cli();   //关中断
                    battery1Sum -= smpData[i].battery1;
                    smpData[i].battery1 = adResult[0];
                    battery1Sum += adResult[0];
                    
                    DQSum -= smpData[i].DQ;
                    smpData[i].DQ       = adResult[2];
                    DQSum += adResult[2];
                    
                    battery2Sum -= smpData[i].battery2;
                    smpData[i].battery2 = adResult[3];
                    battery2Sum += adResult[3];
                    
                    tempSum -= smpData[i].temp;
                    smpData[i].temp     = adResult[4];
                    tempSum += adResult[4];
                    
                    chargeCurSum -= smpData[i].chargeCurrent;
                    smpData[i].chargeCurrent = adResult[5];
                    chargeCurSum += adResult[5];
                    sti();    //开中断
                    
                    i ++;
                    if(i >= SAMP_BUF_SIZE)
                    {
                        i = 0;
                    }
                }
                
                if(preComp == 0) //压力缓冲未被充满
                {
                    cli();
                    presureSum += adResult[1];
                    preBuf[j] = adResult[1];
                    sti();
                    
                    j ++;
                    if(j >= PRE_BUF_SIZE)
                    {
                        j = 0;
                        preComp = 1;
                    }
                    
                }else  //压力传感器已被充满
                {
                    cli();
                    presureSum -= preBuf[j];
                    preBuf[j] = adResult[1];
                    presureSum += adResult[1];
                    sti();
                    
                    j ++;
                    if(j >= PRE_BUF_SIZE)
                    {
                        j = 0;
                    }
                }
            }else         //如果此项出错，则必须弹窗警示
            {
                          //代码需在后续添加
            }
        }  
            
        sleep_delay();
    }
}