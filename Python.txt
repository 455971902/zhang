对于单个字节的编码

ord（‘ A ’）：  表示为65的整数

chr ( '65 '):   表示字符转化为'A'

python 对bytes类型的数据用带b的前缀的单引号或者是双引号表示：

x = b'ABC'
python 对bytes类型的数据用带b的前缀的单引号或者是双引号表示：

x = b'ABC'

在bytes中无法显示为ASCII字符的字节，用\x##显示

在将bytes数据变为str 就需要用decode

>>> b'ABC'.decode('ascii')
'ABC'

如果bytes中包含无法解码的字节，decode()方法会报错：

>>> b'\xe4\xb8\xad\xff'.decode('utf-8')

Traceback (most recent call last):
  ...

如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节：

>>> b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')
'中'

我们经常会输出类似'亲爱的xxx你好！你xx月的话费是xx，余额是xx'之类的字符串
而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。

>>> 'hello, %s' %' world'
hello world

>>>'hi, %s, you have $ %d' % ('yu juan , 100000)

format()

另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次
替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：

>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
'Hello, 小明, 成绩提升了 17.1%'

Python 内置数据类型：list 
>>> classmates = ['zhangxu', 'Bob', 'yujuan']
>>>len(classmates)
3

用索引可以直接访问list中的每一个元素 索引是从0开始的：
>>> classmates[0]
zhangxu

>>> classmates[-1]  （从最后一个开始，一次类推可以获取倒数 2、3、4）
yujuan

list 是一个可变的有序表，可以向list中追加元素到末尾
>>> classmates.append ('Adam')
>>>classmates
['zhangxu', 'jack', 'yujuan', 'Adam']

要删除指定位置的元素用POP(i)的方法，其中i是索引的位置
>>> classmates.pop(1)
'jack'
>>>classmates
['zhangxu','yujuan']

要把某个元素替换成别的元素可以直接复制给对应的索引位置：
classmates【3】

list元素也可以是另一个list 
另一种有序序列列表叫元组， tuple ：：tuple和list非常相似，但是tuple一旦初始化后不能修改























